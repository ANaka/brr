# Generated by CodiumAI

import pytest
from geodude.ops import center_at, make_like, scale_like
from shapely.geometry import Point, Polygon, box

"""
Code Analysis

Objective:
The objective of the "make_like" function is to rescale and center a given polygon to fit within a target polygon
The function returns the transformed polygon.

Inputs:
- p: a Shapely polygon to be transformed
- target: a Shapely polygon that serves as the target for the transformation
- return_transform (optional): a boolean flag indicating whether to return the transformation parameters or not

Flow:
1. The "scale_like" function is called with the input polygon and target polygon as arguments, and the return_transform flag set to True.
2. The "center_at" function is called with the scaled polygon and the centroid of the target polygon as arguments
3. The transformation parameters from both functions are combined and returned along with the transformed polygon.

Outputs:
- transformed_poly: the transformed Shapely polygon
- transform (optional): a dictionary containing the transformation parameters

Additional aspects:
- The "scale_like" function rescales the input polygon to fit within the target polygon, while preserving the aspect ratio if specified.
- The "center_at" function centers the scaled polygon at the centroid of the target polygon.
- The transformation parameters from both functions are combined and returned as a dictionary.
"""


class TestMakeLike:

    # Tests that the function correctly rescales and centers a valid shapely polygon within a target polygon. tags: [happy path]
    def test_make_like_happy_path(self):
        # Happy path test
        p = box(0, 0, 2, 2)
        target = box(0, 0, 4, 4)
        expected_result = box(0, 0, 4, 4)
        assert make_like(p, target) == expected_result


class TestCenterAt:
    # Tests that the function correctly translates a point to a target point. tags: [happy path]
    def test_translate_point_to_target(self):
        # Happy path test for translating a Point to a target Point
        point = Point(0, 0)
        target_point = Point(5, 5)
        translated_point = center_at(point, target_point)
        assert translated_point.x == 5 and translated_point.y == 5


class TestScaleLike:

    # Tests that the function scales a geometry object to match the size of a target geometry object,
    # preserving the aspect ratio of the original object and using the smaller scaling factor. tags: [happy path]
    def test_scale_like_happy(self):
        poly1 = Polygon([(0, 0), (0, 1), (1, 1), (1, 0)])
        poly2 = Polygon([(0, 0), (0, 2), (2, 2), (2, 0)])
        scaled_poly = scale_like(poly1, poly2)
        assert scaled_poly.area == pytest.approx(poly2.area, rel=1e-3)
        assert scaled_poly.length == pytest.approx(poly2.length, rel=1e-3)
