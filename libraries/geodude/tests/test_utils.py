# Generated by CodiumAI

import geopandas as gpd
from geodude.utils import flatten_geoms
from shapely.geometry import GeometryCollection, LineString, Point, Polygon

"""
Code Analysis

Objective:
The objective of the 'merge_geoms' function is to merge multiple geometries into a single geometry.
The function can take in different types of geometries such as GeoDataFrame, GeoSeries, and List of Geometry,
and can return the merged geometries as either a GeoDataFrame or a List of Geometry.

Inputs:
- geoms: Union[gpd.GeoDataFrame, gpd.GeoSeries, List[Geometry]] - the geometries to be merged
- as_gdf: bool = True - a boolean flag indicating whether to return the merged geometries as a GeoDataFrame or a List of Geometry

Flow:
1. Check the type of the input geometries and convert them to a list of Geometry if necessary
2. Merge the geometries by iterating through each geometry and appending its sub-geometries if it has any, or appending the geometry itself if not
3. Return the merged geometries as either a GeoDataFrame or a List of Geometry based on the value of the 'as_gdf' flag

Outputs:
- Union[gpd.GeoDataFrame, List[Geometry]] - the merged geometries as either a GeoDataFrame or a List of Geometry

Additional aspects:
- The function uses the 'shapely' and 'geopandas' libraries for geometry manipulation and data handling
- The function can handle different types of geometries and can merge sub-geometries if they exist
- The function can be useful for simplifying and aggregating complex geometries for analysis and visualization purposes.
"""


class TestMergeGeoms:

    # Tests that the function can handle different types of geometries. tags: [happy path]
    def test_merge_geoms_different_geometry_types(self):
        # Happy path test for different types of geometries
        poly = GeometryCollection(
            [Polygon([(0, 0), (1, 0), (1, 1), (0, 1)]), Polygon([(2, 2), (3, 2), (3, 3), (2, 3)])]
        )
        line = LineString([(0, 0), (1, 1), (2, 2)])
        point = Point(0, 0)
        merged = flatten_geoms([poly, line, point])
        assert isinstance(merged, gpd.GeoDataFrame)
        assert len(merged) == 4

    # Tests that the function can handle an empty list input. tags: [edge case]
    def test_merge_geoms_empty_list(self):
        # Edge case test for empty list input
        merged = flatten_geoms([])
        assert len(merged) == 0

    # Tests that the function can handle a single geometry input. tags: [edge case]
    def test_merge_geoms_single_geometry(self):
        # Edge case: Test that the function can handle a single geometry input
        geom = Point(0, 0).buffer(10)
        result = flatten_geoms(geom)
        assert isinstance(result, gpd.GeoDataFrame)
        assert len(result) == 1
        assert result.geometry.iloc[0] == geom

    # Tests that the function can merge sub-geometries. tags: [behavior]
    def test_merge_geoms_sub_geometries(self):
        # Behavior: Test that the function can merge sub-geometries
        geom1 = Polygon(((0, 0), (0, 1), (1, 1), (1, 0), (0, 0)))
        geom2 = Polygon(((2, 2), (2, 3), (3, 3), (3, 2), (2, 2)))
        geom3 = Polygon(((4, 4), (4, 5), (5, 5), (5, 4), (4, 4)))
        geom4 = [geom1, geom2]
        geoms = [geom4, geom3]
        result = flatten_geoms(geoms)
        assert isinstance(result, gpd.GeoDataFrame)
        assert len(result) == 3
        assert result.geometry.iloc[0] == geom1
        assert result.geometry.iloc[1] == geom2
        assert result.geometry.iloc[2] == geom3

    # Tests that the function can return the merged geometries as either a geodataframe or a list of geometry. tags: [behavior]
    def test_merge_geoms_return_type(self):
        # Behavior: Test that the function can return the merged geometries as either a GeoDataFrame or a List of Geometry
        geom1 = Polygon(((0, 0), (0, 1), (1, 1), (1, 0), (0, 0)))
        geom2 = Polygon(((2, 2), (2, 3), (3, 3), (3, 2), (2, 2)))
        geoms = [geom1, geom2]
        result_gdf = flatten_geoms(geoms, as_gdf=True)
        result_list = flatten_geoms(geoms, as_gdf=False)
        assert isinstance(result_gdf, gpd.GeoDataFrame)
        assert len(result_gdf) == 2
        assert result_gdf.geometry.iloc[0] == geom1
        assert result_gdf.geometry.iloc[1] == geom2
        assert isinstance(result_list, list)
        assert len(result_list) == 2
        assert result_list[0] == geom1
        assert result_list[1] == geom2
